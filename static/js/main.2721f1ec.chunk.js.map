{"version":3,"sources":["logo.svg","SortingAlgorithms/SortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMergeSortAnimations","array","animations","length","mergeSort","left","right","mid","Math","floor","start","end","start2","addAnimation","value","index","merge","buildMaxHeap","heapsize","rootIndex","largest","swap","getQuickSortAnimations","quickSortHelper","low","high","pi","pivot","i","j","partition","indexOne","indexTwo","temp","colorChange","push","animationSpeed","SortingVisualizer","props","state","this","resetArray","arraySize","barSize","width","window","innerWidth","console","log","randomInt","setState","buttons","document","getElementsByClassName","removeAttribute","style","color","animate","lenth","sortingAlgorithms","swapped","setAttribute","arrayBars","barOneStyle","barTwoStyle","newColor","setTimeout","backgroundColor","tempHeight","height","javaScriptSorted","sort","a","b","heapSorted","heapSort","areArraysEqual","className","onClick","bubbleSort","quickSort","cocktailSort","map","idx","key","arrayOne","arrayTwo","min","max","random","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2721f1ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","export function getBubbleSortAnimations(array) {\r\n\tconst animations = [];\r\n\tif (array.lenth <= 1) return array;\r\n\tfor (let i = array.length - 1; i > 0; i--) {\r\n\t\tfor (let j = 0; j < i; j++) {\r\n\t\t\tanimations.push({\r\n\t\t\t\tcolorChange: true,\r\n\t\t\t\tindexOne: j,\r\n\t\t\t\tindexTwo: j + 1\r\n\t\t\t});\r\n\t\t\tif (array[j] > array[j + 1]) {\r\n\t\t\t\tswap(array, j, j + 1);\r\n\t\t\t\tanimations.push({\r\n\t\t\t\t\tcolorChange: false,\r\n\t\t\t\t\tindexOne: j,\r\n\t\t\t\t\tindexTwo: j + 1\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tanimations.push({\r\n\t\t\t\tcolorChange: true,\r\n\t\t\t\tindexOne: j,\r\n\t\t\t\tindexTwo: j + 1\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\treturn animations;\r\n}\r\n\r\nexport function getMergeSortAnimations(array) {\r\n\tconst animations = [];\r\n\tif (array.length <= 1) return animations;\r\n\tmergeSort(array, 0, array.length - 1, animations);\r\n\treturn animations;\r\n}\r\n\r\nfunction merge(array, start, mid, end, animations) {\r\n\tlet start2 = mid + 1;\r\n\r\n\t// If the direct merge is already sorted \r\n\tif (array[mid] <= array[start2]) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Two pointers to maintain start \r\n\t// of both arrays to merge \r\n\twhile (start <= mid && start2 <= end) {\r\n\r\n\t\t// If element 1 is in right place\r\n\t\taddAnimation(animations, true, start, start2);\r\n\t\taddAnimation(animations, true, start, start2);\r\n\t\tif (array[start] <= array[start2]) {\r\n\t\t\tstart++;\r\n\t\t} else {\r\n\r\n\t\t\tlet value = array[start2];\r\n\t\t\tlet index = start2;\r\n\r\n\t\t\t// Shift all the elements between element 1 \r\n\t\t\t// element 2, right by 1. \r\n\t\t\twhile (index !== start) {\r\n\t\t\t\taddAnimation(animations, true, index, index - 1);\r\n\t\t\t\tarray[index] = array[index - 1];\r\n\t\t\t\taddAnimation(animations, false, index, index - 1);\r\n\t\t\t\taddAnimation(animations, true, index, index - 1);\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\t\t\tarray[start] = value;\r\n\r\n\t\t\t// Update all the pointers \r\n\t\t\tstart++;\r\n\t\t\tmid++;\r\n\t\t\tstart2++;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction mergeSort(array, left, right, animations) {\r\n\tif (left < right) {\r\n\r\n\t\t// Same as (l + r) / 2, but avoids overflow \r\n\t\t// for large l and r \r\n\t\tlet mid = Math.floor(left + (right - left) / 2);\r\n\r\n\t\t// Sort first and second halves \r\n\t\tmergeSort(array, left, mid, animations);\r\n\t\tmergeSort(array, mid + 1, right, animations);\r\n\r\n\t\tmerge(array, left, mid, right, animations);\r\n\t}\r\n}\r\n\r\nexport function getHeapSortAnimations(array) {\r\n\tconst animations = [];\r\n\tfor (let i = array.length / 2 - 1; i >= 0; i--) {\r\n\t\tbuildMaxHeap(array, array.length, i, animations);\r\n\t}\r\n\tfor (let i = array.length - 1; i >= 0; i--) {\r\n\t\taddAnimation(animations, true, 0, i);\r\n\t\tswap(array, 0, i);\r\n\t\taddAnimation(animations, false, 0, i);\r\n\t\taddAnimation(animations, true, 0, i);\r\n\t\tbuildMaxHeap(array, i, 0, animations);\r\n\t}\r\n\treturn animations;\r\n}\r\n\r\nfunction buildMaxHeap(array, heapsize, rootIndex, animations) {\r\n\tlet largest = rootIndex;\r\n\tlet left = 2 * rootIndex + 1;\r\n\tlet right = 2 * (rootIndex + 1);\r\n\tif (left < heapsize && array[left] > array[largest]) {\r\n\t\taddAnimation(animations, true, left, largest);\r\n\t\tlargest = left;\r\n\t\taddAnimation(animations, true, left, largest);\r\n\t}\r\n\tif (right < heapsize && array[right] > array[largest]) {\r\n\t\taddAnimation(animations, true, right, largest);\r\n\t\tlargest = right;\r\n\t\taddAnimation(animations, true, right, largest);\r\n\t}\r\n\tif (largest !== rootIndex) {\r\n\t\taddAnimation(animations, true, largest, rootIndex);\r\n\t\tswap(array, largest, rootIndex);\r\n\t\taddAnimation(animations, false, largest, rootIndex);\r\n\t\taddAnimation(animations, true, largest, rootIndex);\r\n\t\tbuildMaxHeap(array, heapsize, largest, animations);\r\n\t}\r\n}\r\n\r\nexport function getQuickSortAnimations(array) {\r\n\tconst animations = [];\r\n\tquickSortHelper(array, 0, array.length - 1, animations);\r\n\treturn animations;\r\n}\r\n\r\nfunction quickSortHelper(array, low, high, animations) {\r\n\tif (low < high) {\r\n\t\tlet pi = partition(array, low, high, animations);\r\n\t\tquickSortHelper(array, low, pi - 1, animations);\r\n\t\tquickSortHelper(array, pi + 1, high, animations);\r\n\t}\r\n}\r\n\r\nfunction partition(array, low, high, animations) {\r\n\tlet pivot = array[high];\r\n\tlet i = (low - 1);\r\n\tfor (let j = low; j < high; j++) {\r\n\t\taddAnimation(animations, true, j, high);\r\n\t\tif (array[j] < pivot) {\r\n\t\t\ti++;\r\n\t\t\taddAnimation(animations, false, i, j);\r\n\t\t\tswap(array, i, j);\r\n\t\t}\r\n\t\taddAnimation(animations, true, j, high);\r\n\t}\r\n\taddAnimation(animations, true, i + 1, high);\r\n\tswap(array, i + 1, high);\r\n\taddAnimation(animations, false, i + 1, high);\r\n\taddAnimation(animations, true, i + 1, high);\r\n\treturn i + 1;\r\n}\r\n\r\nexport function getCocktailSortAnimations(array) {\r\n\tconst animations = [];\r\n\tlet swapped = true;\r\n\tlet start = 0;\r\n\tlet end = array.length;\r\n\twhile (swapped) {\r\n\t\tswapped = false;\r\n\t\tfor (let i = start; i < end - 1; i++) {\r\n\t\t\taddAnimation(animations, true, i, i + 1);\r\n\t\t\tif (array[i] > array[i + 1]) {\r\n\t\t\t\tswap(array, i, i + 1);\r\n\t\t\t\taddAnimation(animations, false, i, i + 1);\r\n\t\t\t\tswapped = true;\r\n\t\t\t}\r\n\t\t\taddAnimation(animations, true, i, i + 1);\r\n\t\t}\r\n\t\tif (!swapped) break;\r\n\t\tswapped = false;\r\n\t\tend = end - 1;\r\n\t\tfor (let i = end - 1; i >= start; i--) {\r\n\t\t\taddAnimation(animations, true, i, i + 1);\r\n\t\t\tif (array[i] > array[i + 1]) {\r\n\t\t\t\tswap(array, i, i + 1);\r\n\t\t\t\taddAnimation(animations, false, i, i + 1);\r\n\t\t\t\tswapped = true;\r\n\t\t\t}\r\n\t\t\taddAnimation(animations, true, i, i + 1);\r\n\t\t}\r\n\t\tstart++;\r\n\t}\r\n\treturn animations;\r\n}\r\n\r\nfunction swap(array, indexOne, indexTwo) {\r\n\tlet temp = array[indexOne];\r\n\tarray[indexOne] = array[indexTwo];\r\n\tarray[indexTwo] = temp;\r\n}\r\n\r\nfunction addAnimation(animations, colorChange, indexOne, indexTwo) {\r\n\tanimations.push({\r\n\t\tcolorChange: colorChange,\r\n\t\tindexOne: indexOne,\r\n\t\tindexTwo: indexTwo\r\n\t});\r\n}","import React from 'react';\r\nimport * as sortingAlgorithms from '../SortingAlgorithms/SortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\nimport '../style.css';\r\n\r\n// Change this value for the speed of the animations.\r\nvar animationSpeed = 8;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'lightgreen';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'aqua';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tarray: [],\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.resetArray();\r\n\t}\r\n\r\n\tresetArray() {\r\n\t\tlet width = window.innerWidth;\r\n\t\tconsole.log(width);\r\n\t\tlet arraySize;\r\n\t\tlet barSize;\r\n\t\tif (width >= 1200) {\r\n\t\t\tarraySize = 64;\r\n\t\t\tbarSize = 600;\r\n\t\t\tanimationSpeed = 2;\r\n\t\t} else if (width >= 1000) {\r\n\t\t\tarraySize = 52;\r\n\t\t\tbarSize = 500;\r\n\t\t\tanimationSpeed = 2;\r\n\t\t} else if (width >= 800) {\r\n\t\t\tarraySize = 40;\r\n\t\t\tbarSize = 400;\r\n\t\t\tanimationSpeed = 4;\r\n\t\t} else if (width >= 600) {\r\n\t\t\tarraySize = 32;\r\n\t\t\tbarSize = 300;\r\n\t\t\tanimationSpeed = 6;\r\n\t\t} else {\r\n\t\t\tarraySize = 16;\r\n\t\t\tbarSize = 200;\r\n\t\t\tanimationSpeed = 8;\r\n\t\t}\r\n\t\tconst array = [];\r\n\t\tfor (let i = 0; i < arraySize; i++) {\r\n\t\t\tarray.push(this.randomInt(1, barSize));\r\n\t\t}\r\n\t\tthis.setState({ array });\r\n\t\tlet buttons = document.getElementsByClassName('button');\r\n\t\tfor (let i = 1; i < buttons.length; i++) {\r\n\t\t\tbuttons[i].removeAttribute('disabled');\r\n\t\t\tbuttons[i].style.color = 'white';\r\n\t\t}\r\n\t}\r\n\r\n\tbubbleSort() {\r\n\t\tthis.animate(sortingAlgorithms.getBubbleSortAnimations(this.state.array));\r\n\r\n\t}\r\n\r\n\tmergeSort() {\r\n\t\tthis.animate(sortingAlgorithms.getMergeSortAnimations(this.state.array));\r\n\t}\r\n\r\n\theapSort() {\r\n\t\tthis.animate(sortingAlgorithms.getHeapSortAnimations(this.state.array));\r\n\t}\r\n\r\n\tquickSort() {\r\n\t\tthis.animate(sortingAlgorithms.getQuickSortAnimations(this.state.array));\r\n\t}\r\n\r\n\tcocktailSort() {\r\n\t\tthis.animate(sortingAlgorithms.getCocktailSortAnimations(this.state.array));\r\n\t}\r\n\r\n\tanimate(animations) {\r\n\t\tlet buttons = document.getElementsByClassName(\"button\")\r\n\t\tfor (let i = 0; i < buttons.length; i++) {\r\n\t\t\tbuttons[i].setAttribute('disabled', true);\r\n\t\t\tbuttons[i].style.color = 'black';\r\n\t\t}\r\n\t\tlet j = 0;\r\n\t\tfor (let i = 0; i < animations.length; i++) {\r\n\t\t\tconst arrayBars = document.getElementsByClassName(`array-bar`);\r\n\t\t\tif (animations[i].colorChange) {\r\n\t\t\t\tconst barOneStyle = arrayBars[animations[i].indexOne].style;\r\n\t\t\t\tconst barTwoStyle = arrayBars[animations[i].indexTwo].style;\r\n\t\t\t\tconst newColor = (j++ % 2 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tbarOneStyle.backgroundColor = newColor;\r\n\t\t\t\t\tbarTwoStyle.backgroundColor = newColor;\r\n\t\t\t\t}, i * animationSpeed);\r\n\t\t\t} else {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tconst barOneStyle = arrayBars[animations[i].indexOne].style;\r\n\t\t\t\t\tconst barTwoStyle = arrayBars[animations[i].indexTwo].style;\r\n\t\t\t\t\tconst tempHeight = barOneStyle.height;\r\n\t\t\t\t\tbarOneStyle.height = barTwoStyle.height;\r\n\t\t\t\t\tbarTwoStyle.height = tempHeight;\r\n\t\t\t\t}, i * animationSpeed);\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetTimeout(() => {\r\n\t\t\tbuttons[0].removeAttribute('disabled');\r\n\t\t\tbuttons[0].style.color = 'white';\r\n\t\t}, animations.length * animationSpeed);\r\n\t}\r\n\r\n\ttestSortingAlgorithms() {\r\n\t\tconst javaScriptSorted = this.state.array.sort((a, b) => a - b);\r\n\t\tconst heapSorted = this.heapSort();\r\n\t\tconsole.log(this.areArraysEqual(heapSorted, javaScriptSorted));\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst array = this.state.array;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"array-buttons\">\r\n\t\t\t\t\t<button className=\"button\" onClick={() => this.resetArray()} >\r\n\t\t\t\t\t\tGenerate New Array\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<div className=\"seperator\">------</div>\r\n\t\t\t\t\t<button className=\"button\" onClick={() => this.bubbleSort()}>\r\n\t\t\t\t\t\tBubble Sort\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button className=\"button\" onClick={() => this.mergeSort()} >\r\n\t\t\t\t\t\tMerge Sort\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button className=\"button\" onClick={() => this.heapSort()} >\r\n\t\t\t\t\t\tHeap Sort\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button className=\"button\" onClick={() => this.quickSort()} >\r\n\t\t\t\t\t\tQuick Sort\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button className=\"button\" onClick={() => this.cocktailSort()} >\r\n\t\t\t\t\t\tCocktail Sort\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"array\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tarray.map((value, idx) => (\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tclassName=\"array-bar\"\r\n\t\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tbackgroundColor: PRIMARY_COLOR,\r\n\t\t\t\t\t\t\t\t\theight: `${value}px`,\r\n\t\t\t\t\t\t\t\t}}></div>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div >\r\n\t\t);\r\n\t};\r\n\r\n\r\n\tareArraysEqual(arrayOne, arrayTwo) {\r\n\t\tif (arrayOne.length !== arrayTwo.length) return false;\r\n\t\tfor (let i = 0; i < arrayOne.length && i < arrayTwo.length; i++) {\r\n\t\t\tif (arrayOne[i] !== arrayTwo[i]) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\trandomInt(min, max) {\r\n\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\r\n\t}\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<SortingVisualizer />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( <\r\n  React.StrictMode >\r\n  <\r\n  App / >\r\n  <\r\n  /React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();"],"sourceRoot":""}